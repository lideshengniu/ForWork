console.log(a);
var a = 12;
var b = a;
b = 13;
console.log(a);
/* 
 浏览器为了能够让代码自上而下执行，首先会开辟一块内存(栈内存)=>作用域或执行上下文（context）
 1.执行代码  =》全局作用域
 2.存储变量以及基本数据类型的值
*/
//!变量提示（声）
/* 
 当浏览器开辟处供代码执行的栈内存后，代码并没有自上而下立即执行，而是继续做了一些事情：把当前作用域中所有带var/function关键字的变量进行提前的声明和定义 =>变量提升机制
  1.带var的知识提前声明（declare）"var a"如果只声明没有赋值，默认值是undefined
  2.带function的不仅声明，而且还定义了（defined） "a=13"定义其实就是赋值，准确来说就是让变量和某个值进行关联  
  !!这里函数提前赋值的意思就是函数 不仅开辟了堆 而且堆中放了函数体的字符串及赋了值
*/

//!!函数表达式方式，由于使用var来创建sum,变量提升阶段只会声明变量，不会赋值，所以此时函数在前面执行，函数是没有值得，不能执行 （真实项目中这种方式最常用，因为它操作严谨）
console.log(sum);
sum(10, 20);
var sum = function (n, m) {
  return n + ms;
};
