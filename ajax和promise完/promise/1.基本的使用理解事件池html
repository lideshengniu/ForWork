<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
  </head>
  <body>
    <script>
      //=>JS中，当前行代码报错，会中断主线程的渲染(下面的代码就不执行了)
      //throw new Error("") 手动抛出一个异常错误，目的就是让后面代码不再执行
      // 如果上面代码报错，不想让其影响后面的代码，我们需要做异常捕获：try catch finally
      //   console.log(a); // Uncaught referenceError : a is not defined
      //   let b = 10;
      //   console.log(b);
      try {
        console.log(a);
      } catch (e) {
        //错误信息
        console.log(e.message);
      }
      let b = 10;
      console.log(b);
    </script>
    <script>
      //   let promiseExamp = new Promise(); //=>Uncaught typeerror：promise resolver undefined is not a function
      /*
      new Promise([executor]) 第一个执行函数必须传递
      [executor 简称exe]
      1.NEW promise 的时候就会把exe执行，创建promise的一个实例 （exe是promise类的一个回调函数，promise内部会把它执行）
      2.PROMISE 不仅把exe执行，而且还给exe传递两个参数（两个参数也是函数类型）
        =>resolve函数：它执行代表 promise处理的异步事情是成功的，把promise的状态改为fulfilled
        =>reject函数：它执行代表promise处理的异步事情是失败的，把promise的状态改为rejected/resolved
        3.exe函数中放的就是当前要处理的异步操作事情
      4.promise.prototype
        then:设置成功或者失败后执行的方法(成功或者失败都可以设置，也可以只设置一个)
        pro.then([success],[error])
        pro.then([success])
        pro.then(null,[success])
        catch:设置失败后执行的方法
        finally：设置不论成功还是失败都会执行的方法(一般不用)
      */
      let promiseExamp = new Promise((resolve, reject) => {
        //这里一般存放的都是我们即将要处理的异步任务，任务成功我们执行resolve，任务失败我们执行reject(当然写同步的也可以)
        setTimeout(() => {
          let ran = Math.random();
          if (ran < 0.5) {
            reject(ran);
            return;
          }
          resolve(ran);
        }, 1000);
      });
      //再异步阶段 并不是promise什么都不做而是会开一个事件池，把成功和失败的方法放进池里
      promiseExamp.then(
        (result) => {
          // 状态为fulfilled成功后执行(result：[[promiseValue]])
          console.log('成功' + result);
        },
        (error) => {
          // 状态为rejected失败后执行
          console.log('失败' + error);
        }
      );
      promiseExamp.catch((error) => {
        console.log('失败：' + error);
      });
      promiseExamp.finally((x) => {
        console.log('Haha');
      });
    </script>
  </body>
</html>
